// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Schema for furniture ERP shop
// To manage retail and wholesale and warehouse

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id      Int    @id @default(autoincrement())
  name    String
  email   String @unique
  phone   String @unique
  address String
  // code    String @unique

  User User[]

  // GST details

  createdAt     DateTime        @default(now()) @db.Timestamp()
  updatedAt     DateTime        @updatedAt @db.Timestamp()
  Product       Product[]
  Category      Category[]
  Warehouse     Warehouse[]
  ProductType   ProductType[]
  Supplier      Supplier[]
  PurchaseOrder PurchaseOrder[]
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  firstName       String?
  lastName        String?
  phone           String?
  avatar          String?
  password        String
  role            Role      @default(USER)
  createdProducts Product[] @relation("CreatedByRelation")
  updatedProducts Product[] @relation("UpdatedByRelation")

  createdAt              DateTime                 @default(now()) @db.Timestamp()
  updatedAt              DateTime                 @updatedAt @db.Timestamp()
  client                 Client?                  @relation(fields: [clientId], references: [id])
  clientId               Int?
  Warehouse              Warehouse[] // manager
  Supplier               Supplier[]
  PurchaseOrder          PurchaseOrder[]
  PurchaseOrderStatusLog PurchaseOrderStatusLog[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  code        String
  sku         String?

  // pricing
  baseAmount   Float
  otherCharges Float @default(0) // tax free amount
  totalAmount  Float
  taxSlab      Float
  cgst         Float @default(0)
  sgst         Float @default(0)
  igst         Float @default(0)
  discount     Float @default(0)

  images String[]

  category         Category[]
  client           Client              @relation(fields: [clientId], references: [id])
  clientId         Int
  warehouseProduct Warehouse_Product[]

  updatedBy       User?          @relation("UpdatedByRelation", fields: [updatedById], references: [id])
  updatedById     Int
  createdBy       User           @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdById     Int
  createdAt       DateTime       @default(now()) @db.Timestamp()
  updatedAt       DateTime       @updatedAt @db.Timestamp()
  ProductType     ProductType    @relation(fields: [productTypeId], references: [id])
  productTypeId   Int
  PurchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int?
  tags            ProductTags?   @relation(fields: [productTagsId], references: [id])
  productTagsId   Int?
}

model ProductType {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  products Product[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  products  Product[]

  client      Client        @relation(fields: [clientId], references: [id])
  clientId    Int
  subCategory subCategory[]
}

model subCategory {
  id   Int    @id @default(autoincrement())
  name String

  createdAt  DateTime @default(now()) @db.Timestamp()
  updatedAt  DateTime @updatedAt @db.Timestamp()
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Warehouse {
  id       Int    @id @default(autoincrement())
  name     String
  location String
  address  String

  createdAt        DateTime            @default(now()) @db.Timestamp()
  updatedAt        DateTime            @updatedAt @db.Timestamp()
  warehouseProduct Warehouse_Product[]

  manager   User? @relation(fields: [managerId], references: [id])
  managerId Int?

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int
}

model Warehouse_Product {
  id          Int       @id @default(autoincrement())
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  stock       Int

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()
}

model ProductTags {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  products  Product[]
}

// Money money

model Supplier {
  id        Int     @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String
  phone     String
  address   String
  gstin     String?

  createdAt     DateTime        @default(now()) @db.Timestamp()
  updatedAt     DateTime        @updatedAt @db.Timestamp()
  client        Client          @relation(fields: [clientId], references: [id])
  clientId      Int
  PurchaseOrder PurchaseOrder[]

  // createdBy user
  createdBy   User? @relation(fields: [createdById], references: [id])
  createdById Int?
}

model PurchaseOrder {
  id Int @id @default(autoincrement())

  name        String?
  description String?
  notes       String?

  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId Int
  quantity   Int

  // pricing
  baseAmount   Float
  otherCharges Float @default(0) // tax free amount
  totalAmount  Float @default(0)
  taxSlab      Float @default(0)
  cgst         Float @default(0)
  sgst         Float @default(0)
  igst         Float @default(0)
  discount     Float @default(0)

  // virtual fields
  totalAmountPaid Float @default(0)
  advancePaid     Float @default(0) // the amount paid in advance (not recorded in transactions)
  totalAmountDue  Float @default(0)

  // dates
  deliveryDate  DateTime?
  orderStatus   PURCHASE_ORDER_STATUS         @default(DRAFT)
  paymentStatus PURCHASE_ORDER_PAYMENT_STATUS @default(UNPAID)

  createdBy   User? @relation(fields: [createdById], references: [id])
  createdById Int?

  createdAt                DateTime                   @default(now()) @db.Timestamp()
  updatedAt                DateTime                   @updatedAt @db.Timestamp()
  client                   Client                     @relation(fields: [clientId], references: [id])
  clientId                 Int
  PurchaseOrderTransaction PurchaseOrderTransaction[]
  products                 Product[]
  PurchaseOrderStatusLog   PurchaseOrderStatusLog[]
}

model PurchaseOrderStatusLog {
  id              Int                   @id @default(autoincrement())
  purchaseOrder   PurchaseOrder         @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int
  status          PURCHASE_ORDER_STATUS
  remarks         String?
  note            String?
  logs            String?

  updatedBy   User?    @relation(fields: [updatedById], references: [id])
  updatedById Int?
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @updatedAt @db.Timestamp()
}

model PurchaseOrderTransaction {
  id              Int           @id @default(autoincrement())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int
  amount          Float
  remarks         String?

  transactionDate         DateTime
  externalReferenceNumber String?

  transactionMode TRANSACTION_MODE @default(CASH)

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()
}

enum PURCHASE_ORDER_STATUS {
  DRAFT
  PLACED
  IN_TRANSIT
  DELIVERED
}

enum PURCHASE_ORDER_PAYMENT_STATUS {
  PAID
  PARTIALLY_PAID
  UNPAID
}

enum TRANSACTION_MODE {
  CASH
  CARD
  UPI
  NET_BANKING
  CHEQUE
  OTHER
}
