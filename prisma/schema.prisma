// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Schema for furniture ERP shop
// To manage retail and wholesale and warehouse

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id      Int    @id @default(autoincrement())
  name    String
  email   String @unique
  phone   String @unique
  address String
  // code    String @unique

  User User[]

  // GST details

  createdAt DateTime    @default(now()) @db.Timestamp()
  updatedAt DateTime    @updatedAt @db.Timestamp()
  Product   Product[]
  Category  Category[]
  Warehouse Warehouse[]
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  firstName       String?
  lastName        String?
  phone           String?
  avatar          String?
  password        String
  role            Role      @default(USER)
  createdProducts Product[] @relation("CreatedByRelation")
  updatedProducts Product[] @relation("UpdatedByRelation")

  createdAt DateTime    @default(now()) @db.Timestamp()
  updatedAt DateTime    @updatedAt @db.Timestamp()
  client    Client?     @relation(fields: [clientId], references: [id])
  clientId  Int?
  Warehouse Warehouse[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  code        String
  sku         String?

  // pricing
  baseAmount   Float
  taxSlab      Float
  taxAmount    Float
  totalAmount  Float
  otherCharges Float // tax free

  images String[]
  tags   String[]

  category         Category[]
  client           Client              @relation(fields: [clientId], references: [id])
  clientId         Int
  warehouseProduct Warehouse_Product[]

  updatedBy     User?       @relation("UpdatedByRelation", fields: [updatedById], references: [id])
  updatedById   Int
  createdBy     User        @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdById   Int
  createdAt     DateTime    @default(now()) @db.Timestamp()
  updatedAt     DateTime    @updatedAt @db.Timestamp()
  ProductType   ProductType @relation(fields: [productTypeId], references: [id])
  productTypeId Int
}

model ProductType {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  products  Product[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  products  Product[]

  client      Client        @relation(fields: [clientId], references: [id])
  clientId    Int
  subCategory subCategory[]
}

model subCategory {
  id   Int    @id @default(autoincrement())
  name String

  createdAt  DateTime @default(now()) @db.Timestamp()
  updatedAt  DateTime @updatedAt @db.Timestamp()
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Warehouse {
  id       Int    @id @default(autoincrement())
  name     String
  location String
  address  String

  createdAt        DateTime            @default(now()) @db.Timestamp()
  updatedAt        DateTime            @updatedAt @db.Timestamp()
  warehouseProduct Warehouse_Product[]

  manager   User? @relation(fields: [managerId], references: [id])
  managerId Int?

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int
}

model Warehouse_Product {
  id          Int       @id @default(autoincrement())
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  stock       Int

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()
}
